// Mocks generated by Mockito 5.4.4 from annotations
// in locall_app/test/src/application/auth/bloc/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:locall_app/core/errors/failures.dart' as _i5;
import 'package:locall_app/src/domain/entities/user.dart' as _i6;
import 'package:locall_app/src/domain/usecases/auth/auth_with_provider_usecase.dart'
    as _i10;
import 'package:locall_app/src/domain/usecases/auth/forgot_password_usecase.dart'
    as _i15;
import 'package:locall_app/src/domain/usecases/auth/params/auth_with_provider_params.dart'
    as _i11;
import 'package:locall_app/src/domain/usecases/auth/params/sign_in_params.dart'
    as _i7;
import 'package:locall_app/src/domain/usecases/auth/params/sign_up_params.dart'
    as _i9;
import 'package:locall_app/src/domain/usecases/auth/params/update_password_params.dart'
    as _i14;
import 'package:locall_app/src/domain/usecases/auth/sign_in_usecase.dart'
    as _i3;
import 'package:locall_app/src/domain/usecases/auth/sign_up_usecase.dart'
    as _i8;
import 'package:locall_app/src/domain/usecases/auth/update_password_usecase.dart'
    as _i13;
import 'package:locall_app/src/domain/usecases/auth/update_user_usecase.dart'
    as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SignInUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInUsecase extends _i1.Mock implements _i3.SignInUsecase {
  MockSignInUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> call(
          _i7.SignInParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
            _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);
}

/// A class which mocks [SignUpUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpUsecase extends _i1.Mock implements _i8.SignUpUsecase {
  MockSignUpUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> call(
          _i9.SignUpParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
            _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);
}

/// A class which mocks [AuthWithProviderUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthWithProviderUsecase extends _i1.Mock
    implements _i10.AuthWithProviderUsecase {
  MockAuthWithProviderUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> call(
          _i11.AuthWithProviderParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
            _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);
}

/// A class which mocks [UpdateUserUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateUserUsecase extends _i1.Mock implements _i12.UpdateUserUsecase {
  MockUpdateUserUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call(_i6.User? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [UpdatePasswordUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdatePasswordUsecase extends _i1.Mock
    implements _i13.UpdatePasswordUsecase {
  MockUpdatePasswordUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call(
          _i14.UpdatePasswordParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [ForgotPasswordUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockForgotPasswordUsecase extends _i1.Mock
    implements _i15.ForgotPasswordUsecase {
  MockForgotPasswordUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
