// Mocks generated by Mockito 5.4.4 from annotations
// in locall_app/test/src/application/theme_mode/theme_mode_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:locall_app/core/errors/failures.dart' as _i5;
import 'package:locall_app/src/domain/usecases/theme_mode/get_theme_mode_usecase.dart'
    as _i3;
import 'package:locall_app/src/domain/usecases/theme_mode/get_use_system_theme_usecase.dart'
    as _i6;
import 'package:locall_app/src/domain/usecases/theme_mode/set_theme_mode_usecase.dart'
    as _i7;
import 'package:locall_app/src/domain/usecases/theme_mode/set_use_system_theme_usecase.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetThemeModeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetThemeModeUsecase extends _i1.Mock
    implements _i3.GetThemeModeUsecase {
  MockGetThemeModeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}

/// A class which mocks [GetUseSystemThemeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUseSystemThemeUsecase extends _i1.Mock
    implements _i6.GetUseSystemThemeUsecase {
  MockGetUseSystemThemeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}

/// A class which mocks [SetThemeModeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetThemeModeUsecase extends _i1.Mock
    implements _i7.SetThemeModeUsecase {
  MockSetThemeModeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call(bool? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [SetUseSystemThemeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetUseSystemThemeUsecase extends _i1.Mock
    implements _i8.SetUseSystemThemeUsecase {
  MockSetUseSystemThemeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call(bool? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
